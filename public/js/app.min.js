/*! bitflopme 2013-11-27 */
var app=angular.module("app",["uiSlider"]);app.factory("socket",function($rootScope){var socket=io.connect(GLOBAL.URL,{reconnect:!0,"reconnection delay":500,"max reconnection attempts":10,"sync disconnect on unload":!0});return{on:function(eventName,callback){socket.on(eventName,function(){var args=arguments;$rootScope.$apply(function(){callback.apply(socket,args)})})},emit:function(eventName,data,callback){socket.emit(eventName,data,function(){var args=arguments;$rootScope.$apply(function(){callback&&callback.apply(socket,args)})})},send:function(eventName,data,callback){socket.send(eventName,data,function(){var args=arguments;$rootScope.$apply(function(){callback&&callback.apply(socket,args)})})},destroy:function(){socket.removeAllListeners()}}}),app.directive("collapse",[function(){return{link:function(scope,element,attrs){var isCollapsed;scope.$watch(attrs.collapse,function(value){value?collapse():expand()});var expand=function(){element.addClass("in"),isCollapsed=!1},collapse=function(){isCollapsed=!0,element.removeClass("in")}}}}]),app.filter("reverse",function(){return function(items){return items.slice().reverse()}}),app.directive("scrollGlue",function(){return{priority:1,require:"?ngModel",restrict:"A",link:function(scope,element,attrs,ngModel){ngModel&&scope.$watch(function(){ngModel.$viewValue&&(element[0].scrollTop=0)})}}}),app.directive("localVideo",["socket",function(socket){return{priority:1,restrict:"A",link:function(scope,element){if(scope.peer.local.element=element[0],null!==getUserMedia){var localVideo=element[0];localVideo&&(element.removeAttr("controls"),getUserMedia({video:!0,audio:!0},function(stream){scope.peer.local.stream=stream,null!==RTCPeerConnection&&scope.peer.connection.addStream(stream),localVideo.src=URL.createObjectURL(stream),localVideo.play(),scope.media.available=!0,scope.media.video=!0,scope.media.audio=!0,scope.$apply(),null!==RTCPeerConnection&&socket.emit("peer:ready",{room:GLOBAL.ROOM})},function(){alert("There was an error connecting your webcam. Make sure it is not being used by any other applications.")}))}}}}]),app.directive("remoteVideo",["socket",function(){return{priority:1,restrict:"A",link:function(scope,element){if(scope.peer.remote.element=element[0],null!==getUserMedia){var remoteVideo=element[0];remoteVideo&&element.removeAttr("controls")}}}}]),app.controller("GameCtrl",function($rootScope,$scope,$http,$timeout,socket){function createAnswer(){console.log("5. creating answer to be sent"),$scope.peer.connection.createAnswer(function(desc){$scope.peer.connection.setLocalDescription(desc),socket.emit("peer:send_answer",{room:GLOBAL.ROOM,sdp:desc}),console.log("6. answer has been sent to other player"),console.log("7. add ice candidates")})}function onIceCandidate(event){event.candidate&&(console.log("ice candidate created and sent out"),socket.emit("peer:send_candidate",{room:GLOBAL.ROOM,candidate:event.candidate}))}function onAddStream(event){event&&$scope.peer.remote.element&&(console.log("10. onAddStream has been called"),$scope.peer.remote.element.src=URL.createObjectURL(event.stream))}if($scope.isCollapsed=!0,null!==RTCPeerConnection){var pc=new RTCPeerConnection({iceServers:[{url:"stun:stun.l.google.com:19302"}]},{optional:{DtlsSrtpKeyAgreement:!0}});pc.onicecandidate=onIceCandidate,pc.onaddstream=onAddStream}var playerOptions={BET:{allowed:!1,min:0,max:0,amount:0},RAISE:{allowed:!1,min:0,max:0,amount:0},CALL:{allowed:!1,amount:0},FOLD:{allowed:!1}};$scope.initPeerConnection=function(){console.log("1. init peer connection"),null!==RTCPeerConnection&&$scope.peer.connection.createOffer(function(desc){console.log("2. local description has been set"),$scope.peer.connection.setLocalDescription(desc),socket.emit("peer:send_offer",{room:GLOBAL.ROOM,sdp:desc})},null,{mandatory:{OfferToReceiveAudio:!0,OfferToReceiveVideo:!0}})},$scope.media={available:!1,audio:!1,video:!0},$scope.peer={connection:pc||null,candidates:[],local:{},remote:{},connected:!1},$scope.room={id:-1,players:[],observers:[]},$scope.game={ready:!1,player:{id:-1,name:null,chips:null,cards:[],folded:null,options:playerOptions},opponent:{id:-1,name:null,chips:null,folded:null,cards:[]},events:[],action:null},$scope.fn={msToDateTime:function(ms){var date=new Date(ms);return date.toLocaleString()},parseAmount:function(amount){return null===amount||"undefined"==typeof amount?0:parseInt(amount,10)},toggleVideoStream:function(){$scope.peer.local.stream&&($scope.media.video?($scope.peer.local.stream.getVideoTracks()[0].enabled=!1,$scope.media.video=!1):($scope.peer.local.stream.getVideoTracks()[0].enabled=!0,$scope.media.video=!0))},toggleAudioStream:function(){$scope.peer.local.stream&&($scope.media.audio?($scope.peer.local.stream.getAudioTracks()[0].enabled=!1,$scope.media.audio=!1):($scope.peer.local.stream.getAudioTracks()[0].enabled=!0,$scope.media.audio=!0))}},$scope.action=function(name){var action={};switch(action.name=name,$scope.game.action.turn=null,$scope.game.options=playerOptions,action.name){case"BET":action.amount=parseInt($scope.game.player.options.BET.amount,10);break;case"RAISE":action.amount=parseInt($scope.game.player.options.RAISE.amount,10);break;case"FOLD":$scope.game.player.folded=!0}socket.emit("player:action",{room:GLOBAL.ROOM,action:action})},socket.on("connect",function(){socket.emit("join",{room:GLOBAL.ROOM})}),socket.on("disconnect",function(){socket.emit("disconnect",{})}),socket.on("game:join",function(data){$scope.game.events=data.events,$scope.room.players=data.room.players,$scope.room.observers=data.room.observers,null!==data.player.id&&($scope.game.ready=data.start,-1===$scope.game.player.id&&($scope.game.player.id=data.player.id,$scope.game.player.name=data.user.name))}),socket.on("game:data",function(data){$scope.game.events=data.events,$scope.game.action=data.action,$scope.game.player=data.player,$scope.game.opponent=data.opponent}),socket.on("game:end",function(data){$scope.game.action=data.action,$scope.game.player=data.player,$scope.game.opponent=data.opponent}),socket.on("game:leave",function(data){$scope.game.events=data.events,$scope.game.history=data.history,$scope.room.players=data.room.players,$scope.room.observers=data.room.observers,data.action&&($scope.game.action=data.action),data.player&&($scope.game.player=data.player),data.opponent&&($scope.game.opponent=data.opponent)}),socket.on("game:disconnect",function(){window.location.reload()}),socket.on("peer:init",function(){null!==RTCPeerConnection&&$scope.initPeerConnection()}),socket.on("peer:receive_candidate",function(data){null!==RTCPeerConnection&&(console.log("pushed ice candidate"),$scope.peer.connection.addIceCandidate(new RTCIceCandidate(data.candidate)))}),socket.on("peer:receive_offer",function(data){console.log("3. offer has been received"),null!==RTCPeerConnection&&($scope.peer.connection.setRemoteDescription(new RTCSessionDescription(data.sdp)),console.log("4. candiadtes in receive offer:"+JSON.stringify($scope.peer.candidates,null,4)),createAnswer())}),socket.on("peer:receive_answer",function(data){null!==RTCPeerConnection&&($scope.peer.connection.setRemoteDescription(new RTCSessionDescription(data.sdp)),console.log("8. received answer!"),console.log("9. addIceCandidates"))}),$scope.$on("$destroy",function(){socket.destroy()})}),app.directive("dropdownToggle",["$document",function($document){var openElement=null,closeMenu=angular.noop;return{restrict:"CA",link:function(scope,element){element.parent().bind("click",function(){closeMenu()}),element.bind("click",function(event){var elementWasOpen=element===openElement;event.preventDefault(),event.stopPropagation(),openElement&&closeMenu(),elementWasOpen||(element.parent().addClass("open"),openElement=element,closeMenu=function(event){event&&(event.preventDefault(),event.stopPropagation()),$document.unbind("click",closeMenu),element.parent().removeClass("open"),closeMenu=angular.noop,openElement=null},$document.bind("click",closeMenu))})}}}]);